{"version":3,"sources":["shared/components/Section/Section.module.css","shared/components/Input/Input.module.css","components/ContactList/ContactList.module.css","shared/components/Button/Button.module.css","components/FormContacts/FormContacts.module.css","redux/items/itemsActions.js","redux/items/itemsReducer.js","redux/filter/filterAction.js","redux/filter/filterReducer.js","redux/store.js","shared/components/Section/Section.jsx","shared/components/Input/Input.jsx","shared/components/Button/Button.jsx","components/FormContacts/FormContacts.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","nanoid","deleteContact","itemReducer","createReducer","type","state","lowerCaseName","toLowerCase","find","alert","filter","item","filterContacts","filterReducer","_","persistConfig","key","storage","blacklist","contactsReduser","combineReducers","items","itemsReducer","persistedReducer","persistReducer","store","configureStore","reducer","contacts","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","Section","title","children","classEl","className","styles","container","forChildrens","Input","props","labelName","value","onChange","pattern","placeholderValue","filterComponent","formComponent","htmlFor","formLabel","formInput","placeholder","defaultProps","undefined","Button","text","onClick","submitBtn","btn","FormContacts","dispatch","useDispatch","onSubmit","e","preventDefault","formElements","FormData","currentTarget","dataObj","forEach","nameInput","document","querySelector","numberInput","resetForm","s","form","ContactList","array","contactList","map","contactItem","src","toonavatar","generate_avatar","alt","width","contactImg","memo","App","useSelector","target","lowerCaseFilter","includes","filterContactsHandler","ReactDOM","render","StrictMode","loading","getElementById"],"mappings":"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","file":"static/js/main.fd1664d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"Section_contacts__1STZv\",\"phonebook\":\"Section_phonebook__3EG2E\",\"container\":\"Section_container__Zzssc\",\"title\":\"Section_title__cpx8s\",\"forChildrens\":\"Section_forChildrens__3W0UY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formComponent\":\"Input_formComponent__2RJyg\",\"filterComponent\":\"Input_filterComponent__12hGr\",\"formLabel\":\"Input_formLabel__2rvZq\",\"formInput\":\"Input_formInput__28fgE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__rmpI_\",\"contactItem\":\"ContactList_contactItem__1eO7N\",\"contactImg\":\"ContactList_contactImg__BvQvH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"submitBtn\":\"Button_submitBtn__2k263\",\"btn\":\"Button_btn__UHjpR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"FormContacts_form__1P0gV\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport const addContact = createAction('addContact', (name, number) => ({\r\n  payload: {\r\n    name,\r\n    number,\r\n    id: nanoid(),\r\n  },\r\n}));\r\n\r\nexport const deleteContact = createAction('deleteContact');\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport { addContact, deleteContact } from '../items/itemsActions';\r\n\r\nconst itemReducer = createReducer([], {\r\n  [addContact.type]: (state, { payload }) => {\r\n    const lowerCaseName = payload.name.toLowerCase();\r\n\r\n    const findInArray = state.find(({ name }) => {\r\n      const lowerCaseStateName = name.toLowerCase();\r\n      return lowerCaseStateName === lowerCaseName;\r\n    });\r\n\r\n    if (findInArray) {\r\n      return alert(`${payload.name} is already in your contacts!`);\r\n    }\r\n    return [...state, payload];\r\n  },\r\n  [deleteContact.type]: (state, { payload }) => state.filter(item => item.id !== payload),\r\n});\r\n\r\nexport default itemReducer;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const filterContacts = createAction('filterContacts');\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport { filterContacts } from '../filter/filterAction';\r\n\r\nconst filterReducer = createReducer('', {\r\n  [filterContacts.type]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default filterReducer;\r\n","// process - глобальная переменная в Node.js\r\n// process.env.NODE_ENV - какая стадия проекта (девелопмент, продакшн...)\r\n\r\nimport { combineReducers } from 'redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport itemsReducer from './items/itemsReducer';\r\nimport filterReducer from './filter/filterReducer';\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst contactsReduser = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, contactsReduser);\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistedReducer,\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import PropTypes from 'prop-types';\r\nimport styles from './Section.module.css';\r\n\r\nconst Section = ({ title, children, classEl }) => {\r\n  return (\r\n    <section className={styles[classEl]}>\r\n      <div className={styles.container}>\r\n        <h2 className={styles.title}>{title}</h2>\r\n        <div className={styles.forChildrens}>{children}</div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\nimport styles from './Input.module.css';\r\n\r\nconst id = nanoid();\r\n\r\nconst Input = props => {\r\n  const { labelName, value, onChange, type, name, pattern, title, placeholderValue } = props;\r\n\r\n  return (\r\n    <div className={name === 'filter' ? styles.filterComponent : styles.formComponent}>\r\n      <label htmlFor={id} className={styles.formLabel}>\r\n        {labelName}:\r\n      </label>\r\n      <input\r\n        className={styles.formInput}\r\n        id={id}\r\n        value={value}\r\n        onChange={onChange}\r\n        type={type}\r\n        name={name}\r\n        pattern={pattern}\r\n        title={title}\r\n        placeholder={placeholderValue}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n\r\nInput.defaultProps = {\r\n  type: 'text',\r\n  placeholder: undefined,\r\n};\r\n\r\nInput.propTypes = {\r\n  labelName: PropTypes.string,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  type: PropTypes.string,\r\n  name: PropTypes.string,\r\n  pattern: PropTypes.string,\r\n  title: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport styles from './Button.module.css';\r\n\r\nconst Button = ({ type, text, onClick }) => {\r\n  return (\r\n    <button\r\n      onClick={onClick ? onClick : undefined}\r\n      type={type}\r\n      className={type === 'submit' ? styles.submitBtn : styles.btn}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\nexport default Button;\r\n\r\nButton.defaultProps = {\r\n  type: 'button',\r\n  onClick: undefined,\r\n};\r\n\r\nButton.propTypes = {\r\n  type: PropTypes.string,\r\n  text: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func,\r\n};\r\n","import { useDispatch } from 'react-redux';\r\n\r\nimport { addContact } from '../../redux/items/itemsActions';\r\nimport Input from '../../shared/components/Input';\r\nimport Button from '../../shared/components/Button';\r\n\r\nimport s from './FormContacts.module.css';\r\n\r\nconst FormContacts = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const formElements = new FormData(e.currentTarget);\r\n    const dataObj = {};\r\n\r\n    formElements.forEach((value, name) => (dataObj[name] = value));\r\n    const { name, number } = dataObj;\r\n\r\n    if (!name || !number) {\r\n      return alert('Please fill the form');\r\n    }\r\n\r\n    dispatch(addContact(name, number));\r\n    resetForm();\r\n  }\r\n\r\n  function resetForm() {\r\n    const nameInput = document.querySelector('input[name=\"name\"]');\r\n    const numberInput = document.querySelector('input[name=\"number\"]');\r\n\r\n    nameInput.value = '';\r\n    numberInput.value = '';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className={s.form}>\r\n        <Input\r\n          labelName=\"Name\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          placeholderValue=\"Jane Doe\"\r\n        />\r\n\r\n        <Input\r\n          labelName=\"Number\"\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          placeholderValue=\"+38-099-123-45-67\"\r\n        />\r\n\r\n        <Button type=\"submit\" text=\"Add contact\" />\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormContacts;\r\n","import { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { memo } from 'react';\r\nimport toonavatar from 'cartoon-avatar';\r\n\r\nimport { deleteContact } from '../../redux/items/itemsActions';\r\nimport Button from '../../shared/components/Button';\r\n\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ array }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <ul className={s.contactList}>\r\n      {array.map(({ id, name, number }) => (\r\n        <li key={id} className={s.contactItem}>\r\n          <img src={toonavatar.generate_avatar()} alt=\"img\" width=\"60\" className={s.contactImg} />\r\n          <div>\r\n            <p>{name}:</p>\r\n            <p>{number}</p>\r\n          </div>\r\n\r\n          <Button type=\"button\" text=\"&#128473;\" onClick={() => dispatch(deleteContact(id))} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default memo(ContactList);\r\n\r\nContactList.propTypes = {\r\n  array: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { filterContacts } from './redux/filter/filterAction';\nimport Section from './shared/components/Section';\nimport FormContacts from './components/FormContacts';\nimport Input from './shared/components/Input';\nimport ContactList from './components/ContactList';\n\nimport './styles/App.css';\n\nconst App = () => {\n  const items = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  function filterChangeHandler(e) {\n    const { value } = e.target;\n    dispatch(filterContacts(value));\n  }\n\n  function filterContactsHandler() {\n    if (!filter) {\n      return items;\n    }\n\n    const lowerCaseFilter = filter.toLowerCase();\n\n    const filteredContacts = items.filter(({ name }) => {\n      const lowerCaseName = name.toLowerCase();\n      return lowerCaseName.includes(lowerCaseFilter);\n    });\n\n    return filteredContacts;\n  }\n\n  return (\n    <>\n      <Section title={'Phonebook'} classEl={'phonebook'}>\n        <FormContacts />\n        <Input\n          labelName=\"Find contact by name\"\n          value={filter}\n          onChange={filterChangeHandler}\n          type=\"text\"\n          name=\"filter\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholderValue=\"Search\"\n        />\n      </Section>\n\n      <Section title={'Contacts'} classEl={'contacts'}>\n        <ContactList array={filterContactsHandler()} />\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport store from './redux/store';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}